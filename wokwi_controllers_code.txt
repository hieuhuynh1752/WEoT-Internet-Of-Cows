#include <WiFi.h>  
#include <PubSubClient.h>
#include <DHTesp.h>
#include <HeartBeat.h>
#include <cstdlib>  // For rand() function

const int DHT_PIN = 15;  
const int HB_PIN = 22;  
double hbFrequency = 1;
double MIN_FREQ = 0.5;
double MAX_FREQ = 2.0;

DHTesp dht; 
HeartBeatSL hb;

const char* ssid = "Wokwi-GUEST"; ///  simulated wifi (can't change name)
const char* password = "";
const char* mqttServer = "test.mosquitto.org";// mosquitto server url
const char* MQTT_TOPIC = "/cowlarIoTse4gd";
const char* TEMP_TOPIC = "/temp";
const char* PULSE_TOPIC = "/pulse";
const char* IS_RUNNING_TOPIC = "/isRunning";

WiFiClient espClient;
PubSubClient client(espClient);

unsigned long lastMsg = 0;
unsigned long lastHbChange = 0;
unsigned long lastHb = 0;

bool isCowRunning = false;

void setupWifi() { 
  delay(10);
  Serial.println();
  Serial.print("Connecting to WiFi: ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA); 
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) { 
    delay(500); // try to reconnect in 0.5s
    Serial.print(".");
  }

  randomSeed(micros()); // setting seed so the randomly generated values are for sure different than in previous runs

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void reconnect() { 
  while (!client.connected()) {
    Serial.print("Reconnecting to MQTT broker...");
    String clientId = "ESP32Client-";
    clientId += String(random(0xffff), HEX);
    if (client.connect(clientId.c_str())) {
      String topicIsRunning = String(MQTT_TOPIC) + IS_RUNNING_TOPIC;
      client.subscribe(topicIsRunning.c_str());
      Serial.println("Connected");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 1 second");
      delay(1000);
    }}
}

void publishData(String temp, String pulse){
  String topicTemp = String(MQTT_TOPIC) + TEMP_TOPIC;
  String topicPulse = String(MQTT_TOPIC) + PULSE_TOPIC;

  client.publish(topicTemp.c_str(), temp.c_str()); 
  client.publish(topicPulse.c_str(), pulse.c_str()); 
}

void printData(String temperature, String pulse){
  Serial.println("Temperature: " + temperature);
  Serial.println("Pulse: " + pulse);
}

double calcPulse(double hbFrequency){
  return hbFrequency*60; // 
}

double determineNewHbFrequency(double hbFrequency){
  double delta;
  bool isIncreasing;

  if (isCowRunning){
    isIncreasing = true;
    delta = (randomPercent() > 30) ? 0.07 : 0.03;
  } else {
    if (hbFrequency > 1){
      isIncreasing = false;
      delta = (randomPercent() > 70) ? 0.07 : 0.02;
    } else {
      isIncreasing = randomPercent() > 60;
      delta = (randomPercent() > 70) ? 0.03 : 0.01;
    }
  }

  double newFreq = isIncreasing ? hbFrequency + delta : hbFrequency - delta;

  if (newFreq < MIN_FREQ){
    newFreq = MIN_FREQ;
  } else if (newFreq > MAX_FREQ){
    newFreq = MAX_FREQ;
  }

  return newFreq;
}

int randomPercent() {
    return rand() % 101;  // random value between 0 and 100
}

void callback(char* topic, byte* payload, unsigned int length) { 
  Serial.print("Is cow running? -> ");

  payload[length] = '\0';  // Ensure null-termination
  char* payloadStr = reinterpret_cast<char*>(payload);

  bool isRunning = strcmp(payloadStr, "true") == 0;

  if (isRunning) {
    Serial.println("Yes");
  } else {
    Serial.println("No");
  }

  isCowRunning = isRunning;
}

void setup() {
  // put your setup code here, to run once:
  pinMode(2, OUTPUT);     
  Serial.begin(115200);
  setupWifi(); 
  client.setServer(mqttServer, 1883);
  client.setCallback(callback); 
  dht.setup(DHT_PIN, DHTesp::DHT22);
  hb.begin(HB_PIN, hbFrequency);
}


void loop() {
  delay(10); // this speeds up the simulation

  if (!client.connected()) {
    reconnect();
  }
  client.loop(); // important to call regularly in the main loop to ensure that the MQTT client operates properly

  unsigned long now = millis();

  hb.beat();

  if (now - lastHbChange > 1000) { // update heart beat every 5s
    lastHbChange = now;
    hbFrequency = determineNewHbFrequency(hbFrequency);
    String newFreq = String(hbFrequency, 2);
    hb.setFrequency(hbFrequency);
    Serial.println("New frequency: " + newFreq);
  }

  if (now - lastMsg > 2000) { // publish every 3s
    lastMsg = now;
    TempAndHumidity  data = dht.getTempAndHumidity();

    String temp = String(data.temperature, 2);
    String pulse = String(calcPulse(hbFrequency), 2);

    publishData(temp, pulse);
    printData(temp, pulse);
  }
}